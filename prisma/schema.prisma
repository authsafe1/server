generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                     String   @id @default(uuid())
  name                   String
  domain                 String   @unique
  email                  String   @unique
  isVerified             Boolean?
  verificationToken      String?  @unique
  password               String
  photo                  String?
  metadata               Json?
  logo                   String?
  plan                   Plan     @default(FREE)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  isTwoFactorAuthEnabled Boolean  @default(false)
  twoFactorSecret        String?

  subscription     Subscription?
  Secret           Secret?
  Branding         Branding?
  EmailTemplates   EmailTemplate[]
  Webhooks         Webhook[]
  Users            User[]
  Clients          Client[]
  Roles            Role[]
  Permissions      Permission[]
  BackupCodes      BackupCode[]
  ActivityLogs     ActivityLog[]
  SecurityAlerts   SecurityAlert[]
  AuthorizationLog AuthorizationLog[]

  @@index([email, domain, createdAt, verificationToken])
}

model Subscription {
  id             String             @id @default(uuid())
  startDate      DateTime           @default(now())
  endDate        DateTime?
  status         SubscriptionStatus @default(ACTIVE)
  customerId     String?
  subscriptionId String?
  amount         Decimal
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId, customerId, subscriptionId])
}

model User {
  id                     String   @id @default(uuid())
  email                  String   @unique
  name                   String?
  password               String?
  isVerified             Boolean?
  verificationToken      String?  @unique
  isTwoFactorAuthEnabled Boolean  @default(false)
  twoFactorSecret        String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  roleId String?
  Role   Role?   @relation(fields: [roleId], references: [id])

  AuthorizationCodes  AuthorizationCode[]
  PasswordResetTokens PasswordResetToken[]
  RefreshTokens       RefreshToken[]
  AuthorizationLogs   AuthorizationLog[]

  @@index([email, createdAt, organizationId, roleId, verificationToken])
}

model Client {
  id          String   @id @default(uuid())
  name        String
  secret      String   @default(cuid())
  redirectUri String?
  grant       String   @default("code")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  Permissions        Permission[]        @relation("ClientPermissions")
  AuthorizationCodes AuthorizationCode[]
  RefreshTokens      RefreshToken[]
  AuthorizationLog   AuthorizationLog[]

  @@index([organizationId, createdAt, name])
}

model Webhook {
  id          String   @id @default(uuid())
  name        String
  url         String
  description String?
  events      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([url, events])
}

model Secret {
  id String @id @default(uuid())

  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  organizationId String       @unique
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([privateKey, publicKey, organizationId])
}

model EmailTemplate {
  id      String @id @default(uuid())
  from    String
  replyTo String
  subject String
  body    Json

  organizationId String       @unique
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  key         String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  Permissions Permission[]
  Users       User[]

  @@index([name, key, organizationId])
}

model Permission {
  id          String   @id @default(uuid())
  name        String
  key         String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  Roles   Role[]
  Clients Client[] @relation("ClientPermissions")

  @@index([name, key, organizationId])
}

model Branding {
  id              String @id @default(uuid())
  logo            String
  theme           String
  backgroundImage String
  header          String
  subHeader       String
  primaryColor    String
  buttonText      String

  organizationId String       @unique
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @default(cuid())
  scope     String[]
  createdAt DateTime @default(now())
  expiresAt DateTime

  clientId String
  Client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([token, clientId, userId, expiresAt])
}

model AuthorizationCode {
  id          String   @id @default(uuid())
  code        String   @unique @default(cuid())
  redirectUri String
  scope       String[]
  state       String?
  nonce       String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  clientId String
  Client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([code, clientId, userId, expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  organizationId String
  Organization   User   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([token, organizationId, expiresAt])
}

model AuthorizationLog {
  id        String   @id @default(uuid())
  action    String
  ip        String?
  createdAt DateTime @default(now())

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  clientId String
  Client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId, clientId, createdAt])
}

model ActivityLog {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
}

model SecurityAlert {
  id        String   @id @default(uuid())
  message   String
  severity  Severity
  ip        String?
  url       String?
  createdAt DateTime @default(now())

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([severity, createdAt, organizationId])
}

model BackupCode {
  id     String  @id @default(uuid())
  code   String  @unique
  isUsed Boolean @default(false)

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([code, organizationId])
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Plan {
  FREE
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  INCOMPLETE
}
